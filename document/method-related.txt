** Delete History Sleeping: 
YCBTClient.deleteHealthHistoryData

 public static void deleteHealthHistoryData(int i2, BleDataResponse bleDataResponse) {
        YCBTClientImpl.getInstance().sendDataType2Device(i2, 3, new byte[]{2}, 2, bleDataResponse);
    }



=======

** Unpack Data Health & Sleeping Data:

DataUnpack.unpackHealthData
 public static HashMap unpackHealthData(byte[] bArr, int i2) {
        HashMap hashMap;
        String str;
        int i3;
        ArrayList arrayList;
        int i4;
        int i5;
        int i6;
        ArrayList arrayList2;
        int i7;
        HashMap hashMap2;
        String str2;
        ArrayList arrayList3;
        int i8;
        ArrayList arrayList4;
        HashMap hashMap3;
        ArrayList arrayList5;
        int i9;
        byte[] bArr2 = bArr;
        int offset = TimeZone.getDefault().getOffset(System.currentTimeMillis());
        HashMap hashMap4 = new HashMap();
        int i10 = 0;
        hashMap4.put("code", 0);
        String str3 = "sportDistance";
        String str4 = "sportCalorie";
        String str5 = "data";
        long j2 = 1000;
        long j3 = 946684800;
        switch (i2) {
            case 2:
                hashMap = hashMap4;
                byte[] bArr3 = bArr2;
                str = "data";
                ArrayList arrayList6 = new ArrayList();
                int i11 = 0;
                while (i11 + 14 <= bArr3.length) {
                    int i12 = i11 + 1;
                    int i13 = i12 + 1;
                    int i14 = (bArr3[i11] & 255) + ((bArr3[i12] & 255) << 8);
                    int i15 = i14 + ((bArr3[i13] & 255) << 16);
                    int i16 = i13 + 1 + 1;
                    long j4 = (i15 + ((bArr3[r6] & 255) << 24) + 946684800) * 1000;
                    int i17 = i16 + 1;
                    int i18 = bArr3[i16] & 255;
                    int i19 = i17 + 1;
                    int i20 = i18 + ((bArr3[i17] & 255) << 8);
                    int i21 = i20 + ((bArr3[i19] & 255) << 16);
                    int i22 = i19 + 1 + 1;
                    long j5 = (i21 + ((bArr3[r6] & 255) << 24) + 946684800) * 1000;
                    int i23 = i22 + 1;
                    int i24 = bArr3[i22] & 255;
                    int i25 = i23 + 1;
                    int i26 = i24 + ((bArr3[i23] & 255) << 8);
                    int i27 = i25 + 1;
                    int i28 = i27 + 1;
                    int i29 = (bArr3[i25] & 255) + ((bArr3[i27] & 255) << 8);
                    int i30 = i28 + 1;
                    int i31 = (bArr3[i28] & 255) + ((bArr3[i30] & 255) << 8);
                    long j6 = offset;
                    long j7 = j4 - j6;
                    long j8 = j5 - j6;
                    HashMap hashMap5 = new HashMap();
                    hashMap5.put("sportStartTime", Long.valueOf(j7));
                    hashMap5.put("sportEndTime", Long.valueOf(j8));
                    hashMap5.put("sportStep", Integer.valueOf(i26));
                    hashMap5.put("sportCalorie", Integer.valueOf(i31));
                    hashMap5.put("sportDistance", Integer.valueOf(i29));
                    arrayList6.add(hashMap5);
                    bArr3 = bArr;
                    i11 = i30 + 1;
                }
                i3 = Constants.DATATYPE.Health_HistorySport;
                arrayList = arrayList6;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 4:
                ArrayList arrayList7 = new ArrayList();
                int i32 = 0;
                int i33 = 0;
                int i34 = 0;
                while (i32 + 20 <= bArr2.length) {
                    int i35 = i32 + 1;
                    byte b2 = bArr2[i32];
                    int i36 = i35 + 1;
                    byte b3 = bArr2[i35];
                    int i37 = i36 + 1;
                    int i38 = i37 + 1;
                    int i39 = (bArr2[i36] & 255) + ((bArr2[i37] & 255) << 8);
                    int i40 = i38 + 1;
                    int i41 = i40 + 1;
                    int i42 = (bArr2[i38] & 255) + ((bArr2[i40] & 255) << 8);
                    int i43 = i42 + ((bArr2[i41] & 255) << 16);
                    int i44 = i41 + 1 + 1;
                    long j9 = (i43 + ((bArr2[r6] & 255) << 24) + 946684800) * 1000;
                    int i45 = i44 + 1;
                    int i46 = bArr2[i44] & 255;
                    int i47 = i45 + 1;
                    int i48 = i46 + ((bArr2[i45] & 255) << 8);
                    int i49 = i48 + ((bArr2[i47] & 255) << 16);
                    int i50 = i47 + 1 + 1;
                    long j10 = (i49 + ((bArr2[r6] & 255) << 24) + 946684800) * 1000;
                    int i51 = i50 + 1;
                    int i52 = bArr2[i50] & 255;
                    int i53 = i51 + 1;
                    int i54 = i52 + ((bArr2[i51] & 255) << 8);
                    if (i54 == 65535) {
                        int i55 = i53 + 1;
                        int i56 = bArr2[i53] & 255;
                        int i57 = i55 + 1;
                        i34 = ((bArr2[i55] & 255) << 8) + i56;
                        int i58 = i57 + 1;
                        int i59 = i58 + 1;
                        i4 = (bArr2[i57] & 255) + ((bArr2[i58] & 255) << 8);
                        int i60 = i59 + 1;
                        i5 = i60 + 1;
                        i6 = (bArr2[i59] & 255) + ((bArr2[i60] & 255) << 8);
                    } else {
                        int i61 = i53 + 1;
                        int i62 = bArr2[i53] & 255;
                        int i63 = i61 + 1;
                        i33 = ((bArr2[i61] & 255) << 8) + i62;
                        int i64 = i63 + 1;
                        int i65 = i64 + 1;
                        i4 = ((bArr2[i63] & 255) + ((bArr2[i64] & 255) << 8)) * 60;
                        int i66 = i65 + 1;
                        i5 = i66 + 1;
                        i6 = ((bArr2[i65] & 255) + ((bArr2[i66] & 255) << 8)) * 60;
                    }
                    ArrayList arrayList8 = new ArrayList();
                    ArrayList arrayList9 = new ArrayList();
                    int i67 = i5;
                    int i68 = 0;
                    int i69 = 0;
                    while (true) {
                        arrayList2 = arrayList7;
                        i7 = i34;
                        if ((i67 - i5) + 8 <= i39 - 20) {
                            int i70 = bArr2[i67] & 255;
                            int i71 = i39;
                            int i72 = i6;
                            int i73 = i67 + 1 + 1 + 1 + 1 + 1;
                            long j11 = ((bArr2[r0] & 255) + ((bArr2[r24] & 255) << 8) + ((bArr2[r28] & 255) << 16) + ((bArr2[r1] & 255) << 24) + 946684800) * 1000;
                            int i74 = i73 + 1;
                            int i75 = i74 + 1;
                            int i76 = i4;
                            int i77 = (bArr2[i73] & 255) + ((bArr2[i74] & 255) << 8);
                            i67 = i75 + 1;
                            int i78 = i77 + ((bArr2[i75] & 255) << 16);
                            if (i70 == 244) {
                                i69++;
                                i68 += i78;
                            }
                            int i79 = i54;
                            long j12 = j11 - offset;
                            if (!arrayList9.contains("" + j12)) {
                                HashMap hashMap6 = new HashMap();
                                hashMap6.put("sleepType", Integer.valueOf(i70));
                                hashMap6.put("sleepStartTime", Long.valueOf(j12));
                                hashMap6.put("sleepLen", Integer.valueOf(i78));
                                arrayList8.add(hashMap6);
                                arrayList9.add("" + j12);
                            }
                            arrayList7 = arrayList2;
                            i34 = i7;
                            i54 = i79;
                            i39 = i71;
                            i6 = i72;
                            i4 = i76;
                        }
                    }
                    HashMap hashMap7 = new HashMap();
                    long j13 = offset;
                    hashMap7.put("startTime", Long.valueOf(j9 - j13));
                    hashMap7.put("endTime", Long.valueOf(j10 - j13));
                    hashMap7.put("deepSleepCount", Integer.valueOf(i54));
                    hashMap7.put("lightSleepCount", Integer.valueOf(i33));
                    hashMap7.put("deepSleepTotal", Integer.valueOf(i4));
                    hashMap7.put("lightSleepTotal", Integer.valueOf(i6));
                    hashMap7.put("rapidEyeMovementTotal", Integer.valueOf(i7));
                    hashMap7.put("sleepData", arrayList8);
                    hashMap7.put("wakeCount", Integer.valueOf(i69));
                    hashMap7.put("wakeDuration", Integer.valueOf(i68));
                    arrayList2.add(hashMap7);
                    hashMap4.put("dataType", Integer.valueOf(Constants.DATATYPE.Health_HistorySleep));
                    hashMap4.put("data", arrayList2);
                    arrayList7 = arrayList2;
                    i32 = i67;
                    i34 = i7;
                }
                return hashMap4;
            case 6:
                hashMap2 = hashMap4;
                str2 = "data";
                arrayList3 = new ArrayList();
                while (i10 + 6 <= bArr2.length) {
                    int i80 = i10 + 1;
                    int i81 = i80 + 1;
                    int i82 = (bArr2[i10] & 255) + ((bArr2[i80] & 255) << 8);
                    int i83 = i82 + ((bArr2[i81] & 255) << 16);
                    int i84 = i81 + 1 + 1;
                    int i85 = i84 + 1;
                    i10 = i85 + 1;
                    int i86 = bArr2[i85] & 255;
                    HashMap hashMap8 = new HashMap();
                    hashMap8.put("heartStartTime", Long.valueOf((((i83 + ((bArr2[r0] & 255) << 24)) + 946684800) * 1000) - offset));
                    hashMap8.put("heartValue", Integer.valueOf(i86));
                    arrayList3.add(hashMap8);
                }
                i8 = Constants.DATATYPE.Health_HistoryHeart;
                i3 = i8;
                arrayList = arrayList3;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 8:
                hashMap2 = hashMap4;
                str2 = "data";
                arrayList3 = new ArrayList();
                while (i10 + 8 <= bArr2.length) {
                    int i87 = i10 + 1;
                    int i88 = i87 + 1;
                    int i89 = (bArr2[i10] & 255) + ((bArr2[i87] & 255) << 8);
                    int i90 = i89 + ((bArr2[i88] & 255) << 16);
                    int i91 = i88 + 1 + 1;
                    int i92 = i91 + 1;
                    int i93 = bArr2[i91] & 255;
                    int i94 = i92 + 1;
                    int i95 = bArr2[i92] & 255;
                    int i96 = i94 + 1;
                    int i97 = bArr2[i94] & 255;
                    HashMap hashMap9 = new HashMap();
                    hashMap9.put("bloodStartTime", Long.valueOf((((i90 + ((bArr2[r0] & 255) << 24)) + 946684800) * 1000) - offset));
                    hashMap9.put("bloodSBP", Integer.valueOf(i95));
                    hashMap9.put("bloodDBP", Integer.valueOf(i97));
                    hashMap9.put("isInflated", Integer.valueOf(i93));
                    arrayList3.add(hashMap9);
                    i10 = i96 + 1;
                }
                i8 = Constants.DATATYPE.Health_HistoryBlood;
                i3 = i8;
                arrayList = arrayList3;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 9:
                byte[] bArr4 = bArr2;
                hashMap2 = hashMap4;
                str2 = "data";
                ArrayList arrayList10 = new ArrayList();
                while (i10 + 20 <= bArr4.length) {
                    int i98 = i10 + 1;
                    int i99 = bArr4[i10] & 255;
                    int i100 = i98 + 1;
                    int i101 = i99 + ((bArr4[i98] & 255) << 8);
                    int i102 = i101 + ((bArr4[i100] & 255) << 16);
                    int i103 = i100 + 1 + 1;
                    long j14 = (i102 + ((bArr4[r1] & 255) << 24) + 946684800) * 1000;
                    int i104 = i103 + 1;
                    int i105 = i104 + 1;
                    int i106 = (bArr4[i103] & 255) + ((bArr4[i104] & 255) << 8);
                    int i107 = i105 + 1;
                    int i108 = bArr4[i105] & 255;
                    int i109 = i107 + 1;
                    int i110 = bArr4[i107] & 255;
                    int i111 = i109 + 1;
                    int i112 = bArr4[i109] & 255;
                    int i113 = i111 + 1;
                    int i114 = bArr4[i111] & 255;
                    int i115 = i113 + 1;
                    int i116 = bArr4[i113] & 255;
                    int i117 = i115 + 1;
                    int i118 = bArr4[i115] & 255;
                    int i119 = i117 + 1;
                    int i120 = bArr4[i117] & 255;
                    int i121 = i119 + 1;
                    ArrayList arrayList11 = arrayList10;
                    int i122 = bArr4[i119] & 255;
                    int i123 = i121 + 1;
                    int i124 = bArr4[i121] & 255;
                    HashMap hashMap10 = new HashMap();
                    hashMap10.put("startTime", Long.valueOf(j14 - offset));
                    hashMap10.put("stepValue", Integer.valueOf(i106));
                    hashMap10.put("heartValue", Integer.valueOf(i108));
                    hashMap10.put("DBPValue", Integer.valueOf(i112));
                    hashMap10.put("SBPValue", Integer.valueOf(i110));
                    hashMap10.put("OOValue", Integer.valueOf(i114));
                    hashMap10.put("respiratoryRateValue", Integer.valueOf(i116));
                    hashMap10.put("hrvValue", Integer.valueOf(i118));
                    hashMap10.put("cvrrValue", Integer.valueOf(i120));
                    hashMap10.put("tempIntValue", Integer.valueOf(i122));
                    hashMap10.put("tempFloatValue", Integer.valueOf(i124));
                    int i125 = i123 + 1;
                    bArr4 = bArr;
                    hashMap10.put("bodyFatIntValue", Integer.valueOf(bArr4[i123] & 255));
                    int i126 = i125 + 1;
                    hashMap10.put("bodyFatFloatValue", Integer.valueOf(bArr4[i125] & 255));
                    hashMap10.put("bloodSugarValue", Integer.valueOf(bArr4[i126] & 255));
                    arrayList11.add(hashMap10);
                    i10 = i126 + 1 + 2;
                    arrayList10 = arrayList11;
                }
                arrayList = arrayList10;
                i3 = 1289;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 26:
                hashMap2 = hashMap4;
                str2 = "data";
                arrayList3 = new ArrayList();
                while (i10 + 6 <= bArr2.length) {
                    int i127 = i10 + 1;
                    int i128 = i127 + 1;
                    int i129 = (bArr2[i10] & 255) + ((bArr2[i127] & 255) << 8);
                    int i130 = i129 + ((bArr2[i128] & 255) << 16);
                    int i131 = i128 + 1 + 1;
                    int i132 = i131 + 1;
                    int i133 = bArr2[i131] & 255;
                    int i134 = i132 + 1;
                    int i135 = bArr2[i132] & 255;
                    HashMap hashMap11 = new HashMap();
                    hashMap11.put("startTime", Long.valueOf((((i130 + ((bArr2[r0] & 255) << 24)) + 946684800) * 1000) - offset));
                    hashMap11.put("type", Integer.valueOf(i133));
                    hashMap11.put("value", Integer.valueOf(i135));
                    arrayList3.add(hashMap11);
                    i10 = i134;
                }
                i8 = Constants.DATATYPE.Health_HistoryBloodOxygen;
                i3 = i8;
                arrayList = arrayList3;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 28:
                hashMap2 = hashMap4;
                str2 = "data";
                arrayList3 = new ArrayList();
                while (i10 + 9 <= bArr2.length) {
                    int i136 = i10 + 1;
                    int i137 = i136 + 1;
                    int i138 = (bArr2[i10] & 255) + ((bArr2[i136] & 255) << 8);
                    int i139 = i138 + ((bArr2[i137] & 255) << 16);
                    int i140 = i137 + 1 + 1;
                    int i141 = i140 + 1;
                    int i142 = bArr2[i140] & 255;
                    int i143 = i141 + 1;
                    int i144 = i143 + 1;
                    float parseFloat = Float.parseFloat((bArr2[i141] & 255) + "." + (bArr2[i143] & 255));
                    int i145 = i144 + 1;
                    int i146 = i145 + 1;
                    float parseFloat2 = Float.parseFloat((bArr2[i144] & 255) + "." + (bArr2[i145] & 255));
                    HashMap hashMap12 = new HashMap();
                    hashMap12.put("startTime", Long.valueOf((((i139 + ((bArr2[r0] & 255) << 24)) + 946684800) * 1000) - offset));
                    hashMap12.put("type", Integer.valueOf(i142));
                    hashMap12.put("tempValue", Float.valueOf(parseFloat));
                    hashMap12.put("humidValue", Float.valueOf(parseFloat2));
                    arrayList3.add(hashMap12);
                    i10 = i146;
                }
                i8 = Constants.DATATYPE.Health_HistoryTempAndHumidity;
                i3 = i8;
                arrayList = arrayList3;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 30:
                hashMap2 = hashMap4;
                str2 = "data";
                arrayList3 = new ArrayList();
                while (i10 + 5 <= bArr2.length) {
                    int i147 = i10 + 1;
                    int i148 = i147 + 1;
                    int i149 = (bArr2[i10] & 255) + ((bArr2[i147] & 255) << 8);
                    int i150 = i149 + ((bArr2[i148] & 255) << 16);
                    int i151 = i148 + 1 + 1;
                    int i152 = i151 + 1;
                    int i153 = bArr2[i151] & 255;
                    int i154 = i152 + 1;
                    int i155 = i154 + 1;
                    float parseFloat3 = Float.parseFloat((bArr2[i152] & 255) + "." + (bArr2[i154] & 255));
                    HashMap hashMap13 = new HashMap();
                    hashMap13.put("startTime", Long.valueOf((((i150 + ((bArr2[r0] & 255) << 24)) + 946684800) * 1000) - offset));
                    hashMap13.put("type", Integer.valueOf(i153));
                    hashMap13.put("tempValue", Float.valueOf(parseFloat3));
                    arrayList3.add(hashMap13);
                    i10 = i155;
                }
                i8 = Constants.DATATYPE.Health_HistoryTemp;
                i3 = i8;
                arrayList = arrayList3;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 32:
                hashMap2 = hashMap4;
                str2 = "data";
                arrayList3 = new ArrayList();
                while (i10 + 6 <= bArr2.length) {
                    int i156 = i10 + 1;
                    int i157 = i156 + 1;
                    int i158 = (bArr2[i10] & 255) + ((bArr2[i156] & 255) << 8);
                    int i159 = i158 + ((bArr2[i157] & 255) << 16);
                    int i160 = i157 + 1 + 1;
                    int i161 = i160 + 1;
                    int i162 = bArr2[i160] & 255;
                    int i163 = i161 + 1;
                    int i164 = i163 + 1;
                    int i165 = (bArr2[i161] & 255) + ((bArr2[i163] & 255) << 8);
                    HashMap hashMap14 = new HashMap();
                    hashMap14.put("startTime", Long.valueOf((((i159 + ((bArr2[r0] & 255) << 24)) + 946684800) * 1000) - offset));
                    hashMap14.put("type", Integer.valueOf(i162));
                    hashMap14.put("value", Integer.valueOf(i165));
                    arrayList3.add(hashMap14);
                    i10 = i164;
                }
                i8 = Constants.DATATYPE.Health_HistoryAmbientLight;
                i3 = i8;
                arrayList = arrayList3;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 41:
                hashMap2 = hashMap4;
                str2 = "data";
                arrayList3 = new ArrayList();
                while (i10 + 5 <= bArr.length) {
                    int i166 = i10 + 1;
                    int i167 = i166 + 1;
                    int i168 = (bArr[i10] & 255) + ((bArr[i166] & 255) << 8);
                    int i169 = i168 + ((bArr[i167] & 255) << 16);
                    int i170 = i167 + 1 + 1;
                    i10 = i170 + 1;
                    int i171 = bArr[i170] & 255;
                    HashMap hashMap15 = new HashMap();
                    hashMap15.put("startTime", Long.valueOf((((i169 + ((bArr[r0] & 255) << 24)) + 946684800) * 1000) - offset));
                    hashMap15.put(ServerProtocol.DIALOG_PARAM_STATE, Integer.valueOf(i171));
                    arrayList3.add(hashMap15);
                }
                i8 = Constants.DATATYPE.Health_HistoryFall;
                i3 = i8;
                arrayList = arrayList3;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 43:
                hashMap2 = hashMap4;
                str2 = "data";
                arrayList4 = new ArrayList();
                while (i10 + 30 <= bArr.length) {
                    int i172 = i10 + 1;
                    int i173 = i172 + 1;
                    int i174 = (bArr[i10] & 255) + ((bArr[i172] & 255) << 8);
                    int i175 = i174 + ((bArr[i173] & 255) << 16);
                    int i176 = i173 + 1 + 1;
                    long j15 = (i175 + ((bArr[r1] & 255) << 24) + 946684800) * 1000;
                    int i177 = i176 + 1;
                    int i178 = bArr[i176] & 255;
                    int i179 = i177 + 1;
                    int i180 = i178 + ((bArr[i177] & 255) << 8);
                    int i181 = i179 + 1;
                    int i182 = i180 + ((bArr[i179] & 255) << 16);
                    int i183 = i181 + 1;
                    ArrayList arrayList12 = arrayList4;
                    long j16 = i182 + ((bArr[i181] & 255) << 24);
                    int i184 = i183 + 1;
                    int i185 = bArr[i183] & 255;
                    int i186 = i184 + 1;
                    int i187 = bArr[i184] & 255;
                    int i188 = i186 + 1;
                    int i189 = bArr[i186] & 255;
                    int i190 = i188 + 1;
                    int i191 = bArr[i188] & 255;
                    int i192 = i190 + 1;
                    int i193 = bArr[i190] & 255;
                    int i194 = i192 + 1;
                    String str6 = str3;
                    int i195 = bArr[i192] & 255;
                    int i196 = i194 + 1;
                    String str7 = str4;
                    int i197 = bArr[i194] & 255;
                    int i198 = i196 + 1;
                    int i199 = bArr[i196] & 255;
                    int i200 = i198 + 1;
                    int i201 = bArr[i198] & 255;
                    int i202 = i200 + 1;
                    int i203 = bArr[i200] & 255;
                    int i204 = i202 + 1;
                    int i205 = bArr[i202] & 255;
                    int i206 = i204 + 1;
                    int i207 = bArr[i204] & 255;
                    int i208 = i206 + 1;
                    int i209 = i207 + ((bArr[i206] & 255) << 8);
                    int i210 = i208 + 1;
                    int i211 = bArr[i208] & 255;
                    int i212 = i210 + 1;
                    int i213 = i212 + 1;
                    int i214 = (bArr[i210] & 255) + ((bArr[i212] & 255) << 8);
                    int i215 = bArr[i213] & 255;
                    HashMap hashMap16 = new HashMap();
                    hashMap16.put("startTime", Long.valueOf(j15 - offset));
                    hashMap16.put("stepValue", Long.valueOf(j16));
                    hashMap16.put("heartValue", Integer.valueOf(i185));
                    hashMap16.put("DBPValue", Integer.valueOf(i189));
                    hashMap16.put("SBPValue", Integer.valueOf(i187));
                    hashMap16.put("OOValue", Integer.valueOf(i191));
                    hashMap16.put("respiratoryRateValue", Integer.valueOf(i193));
                    hashMap16.put("hrvValue", Integer.valueOf(i195));
                    hashMap16.put("cvrrValue", Integer.valueOf(i197));
                    hashMap16.put("tempIntValue", Integer.valueOf(i199));
                    hashMap16.put("tempFloatValue", Integer.valueOf(i201));
                    hashMap16.put("humidIntValue", Integer.valueOf(i203));
                    hashMap16.put("humidFloatValue", Integer.valueOf(i205));
                    hashMap16.put("ambientLightValue", Integer.valueOf(i209));
                    hashMap16.put("isSprotMode", Integer.valueOf(i211));
                    hashMap16.put(str7, Integer.valueOf(i214));
                    hashMap16.put(str6, Integer.valueOf(i215));
                    arrayList4 = arrayList12;
                    arrayList4.add(hashMap16);
                    str4 = str7;
                    str3 = str6;
                    i10 = i213 + 1 + 4;
                }
                i3 = Constants.DATATYPE.Health_HistoryHealthMonitoring;
                arrayList = arrayList4;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 45:
                hashMap2 = hashMap4;
                str2 = "data";
                ArrayList arrayList13 = new ArrayList();
                while (i10 + 26 <= bArr.length) {
                    int i216 = i10 + 1;
                    int i217 = bArr[i10] & 255;
                    int i218 = i216 + 1;
                    int i219 = i217 + ((bArr[i216] & 255) << 8);
                    int i220 = i218 + 1;
                    int i221 = i219 + ((bArr[i218] & 255) << 16);
                    int i222 = i220 + 1;
                    long j17 = i221 + ((bArr[i220] & 255) << 24);
                    int i223 = i222 + 1;
                    int i224 = bArr[i222] & 255;
                    int i225 = i223 + 1;
                    int i226 = i224 + ((bArr[i223] & 255) << 8);
                    int i227 = i226 + ((bArr[i225] & 255) << 16);
                    int i228 = i225 + 1 + 1;
                    long j18 = (i227 + ((bArr[r0] & 255) << 24) + 946684800) * 1000;
                    int i229 = i228 + 1;
                    int i230 = bArr[i228] & 255;
                    int i231 = i229 + 1;
                    int i232 = i230 + ((bArr[i229] & 255) << 8);
                    int i233 = i231 + 1;
                    int i234 = i232 + ((bArr[i231] & 255) << 16);
                    int i235 = i233 + 1;
                    int i236 = i234 + ((bArr[i233] & 255) << 24);
                    int i237 = i235 + 1;
                    int i238 = i237 + 1;
                    int i239 = (bArr[i235] & 255) + ((bArr[i237] & 255) << 8);
                    int i240 = i238 + 1;
                    int i241 = i240 + 1;
                    int i242 = (bArr[i238] & 255) + ((bArr[i240] & 255) << 8);
                    int i243 = i241 + 1;
                    int i244 = bArr[i241] & 255;
                    int i245 = i243 + 1;
                    int i246 = bArr[i243] & 255;
                    int i247 = i245 + 1;
                    int i248 = bArr[i245] & 255;
                    int i249 = i247 + 1;
                    int i250 = i249 + 1;
                    int i251 = (bArr[i247] & 255) + ((bArr[i249] & 255) << 8);
                    int i252 = i250 + 1;
                    ArrayList arrayList14 = arrayList13;
                    int i253 = i252 + 1;
                    long j19 = i251 + ((bArr[i250] & 255) << 16) + ((bArr[i252] & 255) << 24);
                    int i254 = i253 + 1;
                    int i255 = bArr[i253] & 255;
                    int i256 = bArr[i254] & 255;
                    HashMap hashMap17 = new HashMap();
                    long j20 = offset;
                    hashMap17.put("startTime", Long.valueOf(((j17 + 946684800) * 1000) - j20));
                    hashMap17.put("endTime", Long.valueOf(j18 - j20));
                    hashMap17.put("sportSteps", Integer.valueOf(i236));
                    hashMap17.put("sportDistances", Integer.valueOf(i239));
                    hashMap17.put("sportCalories", Integer.valueOf(i242));
                    hashMap17.put("sportMode", Integer.valueOf(i244));
                    hashMap17.put("startMethod", Integer.valueOf(i246));
                    hashMap17.put("sportHeartRate", Integer.valueOf(i248));
                    hashMap17.put("sportTime", Long.valueOf(j19));
                    hashMap17.put("minHeartRate", Integer.valueOf(i255));
                    hashMap17.put("maxHeartRate", Integer.valueOf(i256));
                    arrayList14.add(hashMap17);
                    arrayList13 = arrayList14;
                    i10 = i254 + 1 + 1;
                }
                arrayList4 = arrayList13;
                i3 = Constants.DATATYPE.Health_HistorySportMode;
                arrayList = arrayList4;
                hashMap = hashMap2;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 47:
                hashMap3 = hashMap4;
                String str8 = "data";
                ArrayList arrayList15 = new ArrayList();
                while (i10 + 44 <= bArr2.length) {
                    int i257 = i10 + 1;
                    int i258 = i257 + 1;
                    int i259 = (bArr2[i10] & 255) + ((bArr2[i257] & 255) << 8);
                    int i260 = i259 + ((bArr2[i258] & 255) << 16);
                    int i261 = i258 + 1 + 1;
                    long j21 = (i260 + ((bArr2[r1] & 255) << 24) + 946684800) * 1000;
                    int i262 = i261 + 1;
                    int i263 = bArr2[i261] & 255;
                    int i264 = i262 + 1;
                    int i265 = bArr2[i262] & 255;
                    int i266 = i264 + 1;
                    int i267 = bArr2[i264] & 255;
                    int i268 = i266 + 1;
                    int i269 = bArr2[i266] & 255;
                    int i270 = i268 + 1;
                    int i271 = i270 + 1;
                    int i272 = (bArr2[i268] & 255) + ((bArr2[i270] & 255) << 8);
                    int i273 = i271 + 1;
                    int i274 = bArr2[i271] & 255;
                    int i275 = i273 + 1;
                    int i276 = bArr2[i273] & 255;
                    int i277 = i275 + 1;
                    int i278 = bArr2[i275] & 255;
                    int i279 = i277 + 1;
                    int i280 = bArr2[i277] & 255;
                    int i281 = i279 + 1;
                    String str9 = str8;
                    int i282 = bArr2[i279] & 255;
                    int i283 = i281 + 1;
                    ArrayList arrayList16 = arrayList15;
                    int i284 = bArr2[i281] & 255;
                    int i285 = i283 + 1;
                    int i286 = bArr2[i283] & 255;
                    int i287 = i285 + 1;
                    int i288 = bArr2[i285] & 255;
                    int i289 = i287 + 1;
                    int i290 = bArr2[i287] & 255;
                    int i291 = i289 + 1;
                    int i292 = bArr2[i289] & 255;
                    int i293 = i291 + 1;
                    int i294 = bArr2[i291] & 255;
                    int i295 = bArr2[i293] & 255;
                    HashMap hashMap18 = new HashMap();
                    hashMap18.put("time", Long.valueOf(j21 - offset));
                    hashMap18.put("bloodSugarModel", Integer.valueOf(i263));
                    hashMap18.put("bloodSugarInteger", Integer.valueOf(i265));
                    hashMap18.put("bloodSugarFloat", Integer.valueOf(i267));
                    hashMap18.put("uricAcidModel", Integer.valueOf(i269));
                    hashMap18.put("uricAcid", Integer.valueOf(i272));
                    hashMap18.put("bloodKetoneModel", Integer.valueOf(i274));
                    hashMap18.put("bloodKetoneInteger", Integer.valueOf(i276));
                    hashMap18.put("bloodKetoneFloat", Integer.valueOf(i278));
                    hashMap18.put("bloodFatModel", Integer.valueOf(i280));
                    hashMap18.put("cholesterolInteger", Integer.valueOf(i282));
                    hashMap18.put("cholesterolFloat", Integer.valueOf(i284));
                    hashMap18.put("highLipoproteinCholesterolInteger", Integer.valueOf(i286));
                    hashMap18.put("highLipoproteinCholesterolFloat", Integer.valueOf(i288));
                    hashMap18.put("lowLipoproteinCholesterolInteger", Integer.valueOf(i290));
                    hashMap18.put("lowLipoproteinCholesterolFloat", Integer.valueOf(i292));
                    hashMap18.put("triglycerideCholesterolInteger", Integer.valueOf(i294));
                    hashMap18.put("triglycerideCholesterolFloat", Integer.valueOf(i295));
                    arrayList16.add(hashMap18);
                    bArr2 = bArr;
                    arrayList15 = arrayList16;
                    i10 = i293 + 1 + 22;
                    str8 = str9;
                }
                str2 = str8;
                arrayList5 = arrayList15;
                i9 = Constants.DATATYPE.Health_HistoryComprehensiveMeasureData;
                arrayList = arrayList5;
                hashMap = hashMap3;
                i3 = i9;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 49:
                ArrayList arrayList17 = new ArrayList();
                while (i10 + 44 <= bArr2.length) {
                    int i296 = i10 + 1;
                    int i297 = bArr2[i10] & 255;
                    int i298 = i296 + 1;
                    int i299 = i297 + ((bArr2[i296] & 255) << 8);
                    int i300 = i299 + ((bArr2[i298] & 255) << 16);
                    int i301 = i298 + 1 + 1;
                    int i302 = i301 + 1;
                    int i303 = bArr2[i301] & 255;
                    HashMap hashMap19 = new HashMap();
                    hashMap19.put("time", Long.valueOf((((i300 + ((bArr2[r1] & 255) << 24)) + 946684800) * 1000) - offset));
                    hashMap19.put("data", Integer.valueOf(i303));
                    i10 = i302 + 3;
                }
                i3 = 1329;
                str = "data";
                arrayList = arrayList17;
                hashMap = hashMap4;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            case 51:
                ArrayList arrayList18 = new ArrayList();
                while (i10 + 28 <= bArr2.length) {
                    int i304 = i10 + 1;
                    int i305 = i304 + 1;
                    int i306 = (bArr2[i10] & 255) + ((bArr2[i304] & 255) << 8);
                    int i307 = i306 + ((bArr2[i305] & 255) << 16);
                    int i308 = i305 + 1 + 1;
                    long j22 = (((i307 + ((bArr2[r5] & 255) << 24)) + j3) * j2) - offset;
                    int i309 = i308 + 1;
                    int i310 = bArr2[i308] & 255;
                    int i311 = i309 + 1;
                    int i312 = bArr2[i309] & 255;
                    int i313 = i311 + 1;
                    int i314 = bArr2[i311] & 255;
                    int i315 = i313 + 1;
                    int i316 = bArr2[i313] & 255;
                    int i317 = i315 + 1;
                    int i318 = bArr2[i315] & 255;
                    int i319 = i317 + 1;
                    int i320 = bArr2[i317] & 255;
                    int i321 = i319 + 1;
                    int i322 = bArr2[i319] & 255;
                    int i323 = i321 + 1;
                    int i324 = bArr2[i321] & 255;
                    int i325 = i323 + 1;
                    HashMap hashMap20 = hashMap4;
                    int i326 = bArr2[i323] & 255;
                    int i327 = i325 + 1;
                    String str10 = str5;
                    int i328 = bArr2[i325] & 255;
                    int i329 = i327 + 1;
                    int i330 = offset;
                    int i331 = bArr2[i327] & 255;
                    int i332 = i329 + 1;
                    ArrayList arrayList19 = arrayList18;
                    int i333 = i331 + ((bArr2[i329] & 255) << 8);
                    int i334 = bArr2[i332] & 255;
                    HashMap hashMap21 = new HashMap();
                    hashMap21.put("time", Long.valueOf(j22));
                    hashMap21.put("loadIndexInteger", Integer.valueOf(i310));
                    hashMap21.put("loadIndexFloat", Integer.valueOf(i312));
                    hashMap21.put("hrvInteger", Integer.valueOf(i314));
                    hashMap21.put("hrvFloat", Integer.valueOf(i316));
                    hashMap21.put("pressureInteger", Integer.valueOf(i318));
                    hashMap21.put("pressureFloat", Integer.valueOf(i320));
                    hashMap21.put("bodyInteger", Integer.valueOf(i322));
                    hashMap21.put("bodyFloat", Integer.valueOf(i324));
                    hashMap21.put("sympatheticInteger", Integer.valueOf(i326));
                    hashMap21.put("sympatheticFloat", Integer.valueOf(i328));
                    hashMap21.put("sdn", Integer.valueOf(i333));
                    hashMap21.put("maximalOxygenIntake", Integer.valueOf(i334));
                    arrayList19.add(hashMap21);
                    arrayList18 = arrayList19;
                    i10 = i332 + 1 + 9 + 2;
                    hashMap4 = hashMap20;
                    str5 = str10;
                    offset = i330;
                    j2 = 1000;
                    j3 = 946684800;
                }
                hashMap3 = hashMap4;
                arrayList5 = arrayList18;
                str2 = str5;
                i9 = Constants.DATATYPE.Health_History_Body_Data;
                arrayList = arrayList5;
                hashMap = hashMap3;
                i3 = i9;
                str = str2;
                hashMap.put("dataType", Integer.valueOf(i3));
                hashMap.put(str, arrayList);
                return hashMap;
            default:
                return hashMap4;
        }
    }



============
